---
import Layout from "../../layouts/Layout.astro";
import AdminNavbar from "../../components/admin/adminNavbar";
import "../../../assets/scss/astro-ecommerce.scss";
import UserTable from "../../components/admin/userTable";
import {
    CreateUserModal,
    ViewUserModal,
} from "../../components/admin/userModal";

const data = await fetch(
    "http://localhost:8080/api/v1/user/all?page=0&size=100"
);
const response = await data.json();
const result = response.result;
---

<script>
    import {
        deleteUser,
        createUser,
        editUser,
        changeBlockedState,
        changePassword
    } from "../../components/admin/crudUtils";

    document
        .getElementById("submitCreateUser")
        ?.addEventListener("click", async function (event) {
            let form = (event.target as Element).parentNode;
            const user = {
                name: (form?.querySelector("#name") as HTMLInputElement).value,
                email: (form?.querySelector("#email") as HTMLInputElement)
                    .value,
                phoneNumber: (
                    form?.querySelector("#phoneNumber") as HTMLInputElement
                ).value,
                password: (form?.querySelector("#password") as HTMLInputElement)
                    .value,
                role: (form?.querySelector("#role") as HTMLInputElement).value,
            };

            await createUser(user);
        });

    Array.from(document.getElementsByClassName("infoButton")).forEach(
        (button) => {
            let currentUserId = Number(button.id.slice(5))
            button.setAttribute("data-bs-toggle", "modal"),
                button.setAttribute(
                    "data-bs-target",
                    `#viewUserModal${currentUserId}`
                );

            let editButton = document.getElementById(
                `edit${currentUserId}`
            );

            let submitButton = document.getElementById(
                `submit${currentUserId}`
            );

            let closeButton = editButton?.previousElementSibling;

            let form =
                editButton?.parentElement?.parentElement?.getElementsByTagName(
                    "form"
                )[0];

            let changePasswordButton =
                form?.nextElementSibling?.querySelector(".changePasswordBtn");

            let blockedButton =
                form?.parentElement?.querySelector(".blockedBtn");

            let submitPasswordButton =
                form?.parentElement?.querySelector(".submitPassword");

            editButton?.addEventListener("click", () => {
                toggleEditable(form);
                changePasswordButton?.classList.add("d-none");
                blockedButton?.classList.add("d-none");
            });

            submitButton?.addEventListener("click", () => {
                toggleUneditable(form);
                const user = {
                    id: button.id.slice(5),
                    name: (form?.querySelector("#name") as HTMLInputElement)
                        .value,
                    email: (form?.querySelector("#email") as HTMLInputElement)
                        .value,
                    phoneNumber: (
                        form?.querySelector("#phoneNumber") as HTMLInputElement
                    ).value,
                    role: (form?.querySelector("#role") as HTMLInputElement)
                        .value,
                };
                editUser(user);
            });

            let newPasswordForm = form?.nextElementSibling?.nextElementSibling

            changePasswordButton?.addEventListener("click", () => {
                form?.parentElement
                    ?.querySelector(".edit")
                    ?.classList.add("d-none");
                form?.parentElement
                    ?.querySelector(".submit")
                    ?.classList.remove("d-none");
                newPasswordForm?.classList.remove(
                    "d-none"
                );
                changePasswordButton?.classList.add("d-none");
                blockedButton?.classList.add("d-none");
                submitButton?.classList.add("d-none");
                submitPasswordButton?.classList.remove("d-none");
            });

            submitPasswordButton?.addEventListener('click', () => {
                const newPassword = (newPasswordForm?.querySelector('#newPassword') as HTMLInputElement).value
                changePassword(currentUserId, newPassword)
            })

            blockedButton?.addEventListener('click', () => {
                let currentIsBlocked = blockedButton?.textContent
                if (currentIsBlocked === 'Block') {
                    changeBlockedState(currentUserId, 1)
                } else {
                    changeBlockedState(currentUserId, 0)
                }
            })

            closeButton?.addEventListener("click", () => {
                window.location.reload();
            });
        }
    );

    Array.from(document.getElementsByClassName("deleteButton")).forEach(
        (button) => {
            button.addEventListener("click", () => {
                deleteUser(Number(button.id.slice(7)));
            });
        }
    );

    function toggleEditable(form: any) {
        form.querySelector("#name").removeAttribute("disabled");
        form.querySelector("#email").removeAttribute("disabled");
        form.querySelector("#phoneNumber").removeAttribute("disabled");
        form.querySelector("#role").removeAttribute("disabled");
        // console.log(form.parentElement.querySelector('.edit').classList)
        form.parentElement.querySelector(".edit").classList.add("d-none");
        form.parentElement.querySelector(".submit").classList.remove("d-none");
    }

    function toggleUneditable(form: any) {
        form.querySelector("#name").disabled = "disabled";
        form.querySelector("#email").disabled = "disabled";
        form.querySelector("#phoneNumber").disabled = "disabled";
        form.querySelector("#role").disabled = "disabled";
        // console.log(form.parentElement.querySelector('.edit').classList)
        form.parentElement.querySelector(".edit").classList.remove("d-none");
        form.parentElement.querySelector(".submit").classList.add("d-none");
    }
</script>

<Layout title="Manage user">
    <main>
        <AdminNavbar />
        <div class="container my-3">
            <CreateUserModal />
            {result.userList.map((user: any) => <ViewUserModal user={user} />)}
            <div class="row">
                <div class="col-md-9"></div>
                <div class="col-md-3">
                    <button
                        class="btn btn-dark btn-md"
                        data-bs-toggle="modal"
                        data-bs-target="#createUserModal"
                        id="createUserButton">Create user</button
                    >
                </div>
            </div>
            <div class="row">
                <div class="col">
                    {(<UserTable users={result.userList} />)}
                </div>
            </div>
        </div>
    </main>
</Layout>
